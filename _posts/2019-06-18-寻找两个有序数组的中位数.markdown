
### 题目

给定两个大小为 m 和 n 的有序数组 nums1 和 nums2。

请你找出这两个有序数组的中位数，并且要求算法的时间复杂度为 O(log(m + n))。

你可以假设 nums1 和 nums2 不会同时为空。

#### 示例 1:

nums1 = [1, 3]
nums2 = [2]

则中位数是 2.0
示例 2:

nums1 = [1, 2]
nums2 = [3, 4]

则中位数是 (2 + 3)/2 = 2.5

>来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/median-of-two-sorted-arrays

该题看似很简单，先用了两个指针遍历到(m+n)/2的位置即可，时间复杂度为O(m+n)，但做的时候才发现边界条件特别多。

solution效率达到了97%，但代码是在丑陋，就不贴了。

### 正解

#### 难点与思路总结

[解题思路参考，非常详尽易懂](https://leetcode-cn.com/problems/median-of-two-sorted-arrays/solution/4-xun-zhao-liang-ge-you-xu-shu-zu-de-zhong-wei-shu/)

- 如何在O(log(m + n))复杂度下实现？
   - 在两个数组中分别找到切割点C1和C2，使得C1+C2是中位数的位置，而且保证L1MAX <= R2MIN and L2MAX <= R1MIN,
   即保证左边的集合都小于右边的集合
   - **二分查找**用于查询C1的位置

- m+n可能为奇数或者偶数，如何处理？

插空填充，使得原数组变为2m+1和2n+1；c/2(下去整)就是原数组的index

- 边界条件处理

自己实现了下，感觉还不是很透，有许多细节需要注意
```python
import sys
MAXINT = sys.maxint
MININT = -sys.maxint-1

class Solution(object):        
    def findMedianSortedArrays(self, nums1, nums2):        
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :rtype: float
        """        
        m = len(nums1)
        n = len(nums2)
        if m > n:
            return self.findMedianSortedArrays(nums2, nums1)                 
        k = (m + n + 1) - 1 # 合并填充后的中位数位置 (A[k] + A[k+1])/2
        c1 = m # nums1的cut位置
        c2 = k - m # nums2的cut位置
        lo = 0
        hi = 2*m
        l1max, r1min, l2max, r2min = 0, 0, 0, 0
        while lo <= hi:
            c1 = (lo + hi) / 2
            c2 = k - c1            
            l1max = nums1[(c1-1)/2] if c1 > 0 else MININT
            r1min = nums1[c1/2] if c1 != 2*m else MAXINT
            l2max = nums2[(c2-1)/2] if c2 > 0 else MININT
            r2min = nums2[c2/2] if c2 != 2*n else MAXINT
            
            if l1max > r2min:
                hi = c1 - 1
            elif l2max > r1min:
                lo = c1 + 1
            else:
                break
                
        return (max(l1max, l2max)+min(r1min, r2min)) / 2.0                            
```

### 反思
#### 大的方向分为3块

1. 目的是把数组分成左右两个集合（查找第k大的数，左边是k个，右边是length-k个），左边集合最大的数和右边集合最小的数就是答案。
2. 利用二分查找找cut位置
3. 利用填充空字符，建立虚拟列表，保证长度为偶数

#### 细节和小技能

- 扩充后的虚拟数组映射到原数组：num[(C-1)/2]，右边数字的位置就是num[C/2]
- 保证第一个数组长度小于第二个数组长度，把原参数位置对调传入本函数即可
- 利用int的最大值和最小值，保证max和min函数的正确
- 数组长度x为偶数，那么(x/2)-1，x/2是算中位数的index；x为奇数，则x/2为中位数的index
- 二分查找时，确定mid不是答案时，high=mid-1或者low=mid+1，而不是high=mid或者low=mid


